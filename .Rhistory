t
clumpFreq
values (NDVI_1_clumps)
values (NDVI_1_clumps)
(NDVI_1_clumps)
(NDVI_1_clumps)[[1,]]
NDVI_1_clumps
values (NDVI_1_clumps)
clumpFreq
as.data.frame(clumpFreq)
comp_conex_list <- c()
par(mfrow = c(1,3))
for (n in reclasifyNDVIList) {
formask <- setValues(raster(n), NA)
## Assign 1 to formask to all cells corresponding to the NDVI discretized class==1
formask[n==2] <- 1
#Ploteamos los valores sobre los que aplicar las componentes conexas
plot(formask, legend=FALSE, main ="Mascara")
NDVI_1_clumps <- clump(formask, directions=8)
comp_conex_list <-  append (comp_conex_list,NDVI_1_clumps)
#Ploteamos la división en zonas con NDVI 1 discretizado
plot(na.omit(NDVI_1_clumps), main=paste("Componentes conexas:",max(na.omit(values(NDVI_1_clumps)))))
clumpFreq <- na.omit(freq(NDVI_1_clumps))
h <- head(clumpFreq)
t <- tail(clumpFreq)
#Creamos un dataframe
df <-  as.data.frame(clumpFreq)
df%>%
mutate(area=count*30*30)
print(knitr::kable(df,caption = "Tabla de zonas de estudio con el correspondiente área" ) )
}
comp_conex_list <- c()
par(mfrow = c(1,3))
for (n in reclasifyNDVIList) {
formask <- setValues(raster(n), NA)
## Assign 1 to formask to all cells corresponding to the NDVI discretized class==1
formask[n==2] <- 1
#Ploteamos los valores sobre los que aplicar las componentes conexas
plot(formask, legend=FALSE, main ="Mascara")
NDVI_1_clumps <- clump(formask, directions=8)
comp_conex_list <-  append (comp_conex_list,NDVI_1_clumps)
#Ploteamos la división en zonas con NDVI 1 discretizado
plot(na.omit(NDVI_1_clumps), main=paste("Componentes conexas:",max(na.omit(values(NDVI_1_clumps)))))
clumpFreq <- na.omit(freq(NDVI_1_clumps))
h <- head(clumpFreq)
t <- tail(clumpFreq)
#Creamos un dataframe
df <-  as.data.frame(clumpFreq)
df%>%
mutate("area"=count*30*30)
print(knitr::kable(df,caption = "Tabla de zonas de estudio con el correspondiente área" ) )
}
comp_conex_list <- c()
par(mfrow = c(1,3))
for (n in reclasifyNDVIList) {
formask <- setValues(raster(n), NA)
## Assign 1 to formask to all cells corresponding to the NDVI discretized class==1
formask[n==2] <- 1
#Ploteamos los valores sobre los que aplicar las componentes conexas
plot(formask, legend=FALSE, main ="Mascara")
NDVI_1_clumps <- clump(formask, directions=8)
comp_conex_list <-  append (comp_conex_list,NDVI_1_clumps)
#Ploteamos la división en zonas con NDVI 1 discretizado
plot(na.omit(NDVI_1_clumps), main=paste("Componentes conexas:",max(na.omit(values(NDVI_1_clumps)))))
clumpFreq <- na.omit(freq(NDVI_1_clumps))
h <- head(clumpFreq)
t <- tail(clumpFreq)
#Creamos un dataframe
df <-  as.data.frame(clumpFreq)
df <- df%>%
mutate("area"=count*30*30)
print(knitr::kable(df,caption = "Tabla de zonas de estudio con el correspondiente área" ) )
}
comp_conex_list <- c()
par(mfrow = c(1,2))
for (n in reclasifyNDVIList) {
formask <- setValues(raster(n), NA)
## Assign 1 to formask to all cells corresponding to the NDVI discretized class==1
formask[n==2] <- 1
#Ploteamos los valores sobre los que aplicar las componentes conexas
plot(formask, legend=FALSE, main ="Mascara")
NDVI_1_clumps <- clump(formask, directions=8)
comp_conex_list <-  append (comp_conex_list,NDVI_1_clumps)
#Ploteamos la división en zonas con NDVI 1 discretizado
plot(na.omit(NDVI_1_clumps), col= rev(rainbow(max(na.omit(values(NDVI_1_clumps))))), main=paste("Componentes conexas:",max(na.omit(values(NDVI_1_clumps)))))
clumpFreq <- na.omit(freq(NDVI_1_clumps))
h <- head(clumpFreq)
t <- tail(clumpFreq)
#Creamos un dataframe
df <-  as.data.frame(clumpFreq)
df <- df%>%
mutate("area"=count*30*30)
print(knitr::kable(df,caption = "Tabla de zonas de estudio con el correspondiente área" ) )
}
knitr::opts_chunk$set(echo = TRUE)
library(raster)
library (rgdal)
library(RStoolbox)
library(imager)
library(RGISTools)
library(zoom)
library(excelR)
library(leaflet)
library(tidyverse)
library(ggplot2)
library(widgetframe)
library(magick)
library(imager)
library (lidR)
library(rgl)
library (lidR)
library (glcm)
library(rasterVis)
getwd()
dataFiles <- "data/MALAGA"
files<-list.files(path=dataFiles, full.names = TRUE)
#knitr::knit_hooks$set(webgl = hook_webgl)
knitr::include_graphics("lago.png")
# plot catalog
ctg <- catalog(files)
plot(ctg, map = TRUE)
library(raster)
library (rgdal)
library(RStoolbox)
library(imager)
library(RGISTools)
library(zoom)
library(excelR)
library(leaflet)
library(tidyverse)
library(ggplot2)
library(widgetframe)
library(magick)
library(imager)
library (lidR)
library(rgl)
library (lidR)
library (glcm)
library(rasterVis)
library(shiny)
plot(map = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(raster)
library (rgdal)
library(RStoolbox)
library(imager)
library(RGISTools)
library(zoom)
library(excelR)
library(leaflet)
library(tidyverse)
install.packages("shinythemes")
library(ggplot2)
library(widgetframe)
library(magick)
library(imager)
library (lidR)
library(rgl)
library (lidR)
library (glcm)
library(rasterVis)
library(shiny)
library(shinythemes)
knitr::opts_chunk$set(echo = TRUE)
library(raster)
library (rgdal)
library(RStoolbox)
library(imager)
library(RGISTools)
library(zoom)
library(excelR)
library(leaflet)
library(tidyverse)
library(ggplot2)
library(widgetframe)
library(magick)
library(imager)
library (lidR)
library(rgl)
library (lidR)
library (glcm)
library(rasterVis)
library(shiny)
library(shinythemes)
getwd()
dataFiles <- "data/MALAGA"
files<-list.files(path=dataFiles, full.names = TRUE)
install.packages("lidR")
install.packages("lidR")
shiny::runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp()
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp()
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp()
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp()
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
library(sp)
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp()
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp()
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp()
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
knitr::opts_chunk$set(echo = TRUE)
getwd()
dataFiles <- "data/MALAGA"
files<-list.files(path=dataFiles, full.names = TRUE)
#knitr::knit_hooks$set(webgl = hook_webgl)
knitr::include_graphics("lago.png")
# plot catalog
ctg <- catalog(files)
plot(ctg, map = TRUE)
ctg
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp()
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp()
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp()
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp()
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp()
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp()
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp()
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
plot (a)
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
shiny::runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
install.packages("shinyjs")
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp()
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
clear
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp()
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp()
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp()
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp()
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp()
runApp()
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp()
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp()
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp()
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
shiny::runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
install.packages("shinyWidgets")
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
install.packages("shinydashboard")
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
str_contains("hello", "hel")
str_contains("hello", "hel")
grep(,'strings')
ax <- c("hola","adios")
grep(ax,'strings')
grep(ax,'strings')
c
ax
grep(ax,'strings')
hola in ax
'hola' in ax
"hola" in ax
"hola" %in% ax
"holaa" %in% ax
"hol" %in% ax
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp()
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp()
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
shiny::runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
# GETTING ONLY ATTRIBUTES NEEDED FOR THE PREDICTION SYSTEM
examples <- full_dataset %>% select(gd_previo,
kd_previo,
t9_12_diaprevio,
t13_15_diaprevio,
h8_diaprevio,
h14_diaprevio,
t_dia_diaprevio,
preciptac_dia_diaprevio,
Predicc_temp_day_C,
Predicc_Relative_humidity_day_0_1,
Predicc_cloudy_sky_day_0_1,
Predicc_temp_10_11_12_C,
Predicc_temp_13_14_15_C,
Predicc_R_hum_10_11_12,
Predicc_R_hum_13_14_15,
Predicc_cloudy_10_11_12,
Predicc_cloudy_13_14_15,
kd, # will be predicted with a regression model
Today_cluster14_experts) # will be predicted with a classification model
# GETTING ONLY ATTRIBUTES NEEDED FOR THE PREDICTION SYSTEM
examples <- full_dataset %>% select(gd_previo,
kd_previo,
t9_12_diaprevio,
t13_15_diaprevio,
h8_diaprevio,
h14_diaprevio,
t_dia_diaprevio,
preciptac_dia_diaprevio,
Predicc_temp_day_C,
Predicc_Relative_humidity_day_0_1,
Predicc_cloudy_sky_day_0_1,
Predicc_temp_10_11_12_C,
Predicc_temp_13_14_15_C,
Predicc_R_hum_10_11_12,
Predicc_R_hum_13_14_15,
Predicc_cloudy_10_11_12,
Predicc_cloudy_13_14_15,
kd, # will be predicted with a regression model
Today_cluster14_experts) # will be predicted with a classification model
library(tidyverse)
# GETTING ONLY ATTRIBUTES NEEDED FOR THE PREDICTION SYSTEM
examples <- full_dataset %>% select(gd_previo,
kd_previo,
t9_12_diaprevio,
t13_15_diaprevio,
h8_diaprevio,
h14_diaprevio,
t_dia_diaprevio,
preciptac_dia_diaprevio,
Predicc_temp_day_C,
Predicc_Relative_humidity_day_0_1,
Predicc_cloudy_sky_day_0_1,
Predicc_temp_10_11_12_C,
Predicc_temp_13_14_15_C,
Predicc_R_hum_10_11_12,
Predicc_R_hum_13_14_15,
Predicc_cloudy_10_11_12,
Predicc_cloudy_13_14_15,
kd, # will be predicted with a regression model
Today_cluster14_experts) # will be predicted with a classification model
# GETTING ONLY ATTRIBUTES NEEDED FOR THE PREDICTION SYSTEM
examples <- full_dataset %>% select(gd_previo,
kd_previo,
t9_12_diaprevio,
t13_15_diaprevio,
h8_diaprevio,
h14_diaprevio,
t_dia_diaprevio,
preciptac_dia_diaprevio,
Predicc_temp_day_C,
Predicc_Relative_humidity_day_0_1,
Predicc_cloudy_sky_day_0_1,
Predicc_temp_10_11_12_C,
Predicc_temp_13_14_15_C,
Predicc_R_hum_10_11_12,
Predicc_R_hum_13_14_15,
Predicc_cloudy_10_11_12,
Predicc_cloudy_13_14_15,
kd, # will be predicted with a regression model
Today_cluster14_experts) # will be predicted with a classification model
full_dataset <- read.csv("full_dataset.csv")
# GETTING ONLY ATTRIBUTES NEEDED FOR THE PREDICTION SYSTEM
examples <- full_dataset %>% select(gd_previo,
kd_previo,
t9_12_diaprevio,
t13_15_diaprevio,
h8_diaprevio,
h14_diaprevio,
t_dia_diaprevio,
preciptac_dia_diaprevio,
Predicc_temp_day_C,
Predicc_Relative_humidity_day_0_1,
Predicc_cloudy_sky_day_0_1,
Predicc_temp_10_11_12_C,
Predicc_temp_13_14_15_C,
Predicc_R_hum_10_11_12,
Predicc_R_hum_13_14_15,
Predicc_cloudy_10_11_12,
Predicc_cloudy_13_14_15,
kd, # will be predicted with a regression model
Today_cluster14_experts) # will be predicted with a classification model
dataFiles <- ""
files<-list.files(path=dataFiles, full.names = TRUE)
files
# CREATING NEW FILE FOR DATASET
write.csv(examples,"examples_meteo+radiation+cluster.csv", row.names=FALSE)
# GETTING ONLY ATTRIBUTES NEEDED FOR THE PREDICTION SYSTEM
examples <- full_dataset %>% select(gd_previo,
kd_previo,
t9_12_diaprevio,
t13_15_diaprevio,
h8_diaprevio,
h14_diaprevio,
t_dia_diaprevio,
preciptac_dia_diaprevio,
Predicc_temp_day_C,
Predicc_Relative_humidity_day_0_1,
Predicc_cloudy_sky_day_0_1,
Predicc_temp_10_11_12_C,
Predicc_temp_13_14_15_C,
Predicc_R_hum_10_11_12,
Predicc_R_hum_13_14_15,
Predicc_cloudy_10_11_12,
Predicc_cloudy_13_14_15,
kd, # will be predicted with a regression model
Today_cluster14_experts) # will be predicted with a classification model
shiny::runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof/ursusdm_pv/ursusdm_pv')
install.packages("rsconnect")
install.packages("rsconnect")
rsconnect::setAccountInfo(name='ursusdm',
token='B40C92CF096A590984D0E866DE8AFA96',
secret='zkC8h99eeuMr5Jy+lvjQHH6CQwiqdlFMx7hbwOVl')
library(rsconnect)
library(BiocManager)
install.packages("BiocManager")
library(BiocManager)
library(BiocManager)
options(repos = BiocManager::repositories())
getOption("repos")
library(BiocManager)
options(repos = BiocManager::repositories())
runApp('Documents/URSUS-DM/PV_/roof_pv_app/ursusdm_pv')
runApp()
runApp('Documents/URSUS-DM/PV_/roof_pv_app/ursusdm_pv')
runApp()
runApp('Documents/URSUS-DM/PV_/roof_pv_app/ursusdm_pv')
shiny::runApp()
