potencia = potencia_dia_h)
potencia_silicio_dia_h
potencia_diaria <- c(potencia_diaria, sum(potencia_dia_h))
view (df_radiacion_horaria)
datos_aemet
view (datos_aemet)
potencia_silicio_dia_h
view ()potencia_silicio_dia_h
view ()potencia_silicio_dia_h)
view (potencia_silicio_dia_h)
as.data.frame(potencia_silicio_dia_h)
prodProcesed <- round(potencia_silicio_dia_h/1000,1)
prodProcesed
sumRoofEnergyDay <- sum(prodProcesed)
sumRoofEnergyDay
runApp()
runApp()
runApp()
# Se abre el csv de observaciones convencionales de la estación más cercana al CSV de la 2º hora programada de descarga
obs_conv_hora2_df <- read_csv(file = paste ( "aemet/",obs_conv_hora2))
obs_conv_hora1_df <- obs_conv_hora1_df %>%
mutate(dia = as.Date(fint)) %>%
filter(dia == ayer)
runApp()
obs_conv_hora1_df <- obs_conv_hora1_df %>%
mutate(dia = as.Date(fint)) %>%
filter(dia == ayer)
runApp()
rad_df
estaciones_rad2$indicativo
df_r_global <- rglobal_df(estaciones_rad2$indicativo, ayer)
ayer <- as.character(as.Date(hoy) - 1)
ayer
hoy <-  as.character(Sys.Date())
ayer <- as.character(as.Date(hoy) - 1)
ayer
df_r_global <- rglobal_df(estaciones_rad2$indicativo, ayer)
hoy <-  as.character(Sys.Date())
runApp()
spec(...)
rad_df <- rad_df %>%
filter(Indicativo == id_estacion)
rad_df <- rad_df %>%
filter(Indicativo == id_estacion)
rad_df <- rad_df %>%
filter(Indicativo == 4)
rad_df
estaciones_rad2
rglobal_df(estaciones_rad2$indicativo, ayer)
rglobal_df <- function(id_estacion, ayer) {
rad <- paste("radiacion_solar", ayer, sep = "_")
rad <- paste0(rad,".csv")
rad_df <- read_csv(file = paste ("aemet/",rad) )
rad_df <- rad_df %>%
filter(Indicativo == id_estacion)
horas <- c("Tipo", as.character(5:20), "SUMA")
rad_gl <- rad_df %>% select(all_of(horas))
# 1 wh = 3.6 kJ
rad_gl[1, 2:ncol(rad_gl)] <- rad_gl[1, 2:ncol(rad_gl)] *10/3.6 #Pasar los datos a Wh
rad_gl
}
rad_df <- rad_df %>%
filter(Indicativo == id_estacion)
runApp()
ayer <- as.character(as.Date(hoy) - 1)
runApp()
ayer <- as.character(as.Date(hoy) - 1)
estaciones_rad2$indicativo
df_r_global <- rglobal_df("6156X", ayer)
runApp()
Predicc_cloudy_sky_day_0_1 <- NA
runApp()
print (Predicc_R_hum_13_14_15)
Predicc_cloudy_sky_day_0_1 <- NA
runApp()
Predicc_R_hum_13_14_15 <- df_prediccion_horaria %>%
filter(temperatura.periodo  %in% c(13:15))%>%
select(humedadRelativa.value) %>%
summarise(Predicc_R_hum_13_14_15 = mean(humedadRelativa.value, na.rm = T))%>%
unlist() / 100
Predicc_R_hum_13_14_15
print ("Predicc_R_hum_13_14_15")
runApp()
df_observacion <- observacion_conv_df(id_estacion = estaciones2$indicativo, fecha = hoy, hora1 = "00h", hora2 = "10h")
runApp()
runApp()
runApp()
estaciones_rad
print (lon)
runApp()
estaciones_rad2 <- estaciones_rad %>%
mutate(distancia = distancia(latitud_dec, longitud_dec, 36.70111, -4.470821)) %>%
filter(distancia == min(distancia))
estaciones_rad2
estaciones_rad2 <- estaciones_rad %>%
mutate(distancia = distancia(latitud_dec, longitud_dec, lat, lon))
estaciones_rad2
view(estaciones_rad2)
na.omit (estaciones_rad2)
estaciones_rad2 <- estaciones_rad %>%
mutate(distancia = distancia(latitud_dec, longitud_dec, lat, lon))
estaciones_rad2 <- na.omit(estaciones_rad2)%>%
filter(distancia == min(distancia))
estaciones_rad2
estaciones_rad2 <- estaciones_rad %>%
mutate(distancia = distancia(latitud_dec, longitud_dec, lat, lon))
estaciones_rad2
################## Utilizar solo una vez para descargar los csvs de estaciones meteorológicas y de municipios del AEMET ************************
####3 El resto de scripts de descarga automática trabajarán con los csvs que se descargan con este script
################################################################## Libraries #########################################################################
require("httr")
require("jsonlite")
library(urltools)
library("tidyverse")
library(tidyjson)
library(leaflet)
library(Rcpp)
library(kableExtra)
library(lubridate)
library(cronR)
############################################################# API parameters ########################################################################
api_key <-"eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJtYXJ0YWZlY3VAZ21haWwuY29tIiwianRpIjoiYzlmMWRkMmUtNjE2YS00ZGNmLWE5YzItNzc1ODg3YzlkZTdmIiwiaXNzIjoiQUVNRVQiLCJpYXQiOjE1ODUzMDUzNDUsInVzZXJJZCI6ImM5ZjFkZDJlLTYxNmEtNGRjZi1hOWMyLTc3NTg4N2M5ZGU3ZiIsInJvbGUiOiIifQ.p2Ka71le5XedoJE8iIYIKVh-wyOvAOYEszH9OcwoQxc"
url_base <- "https://opendata.aemet.es/opendata/api"
################################################################# Función GENÉRICA de consulta a la api #############################################
##  url_base: url base para todas las urls de descarga.
##  url: Fragmento de la url para la descarga.
##  api_key: Clave necesaria para la descarga de los datos (se crea en [AEMET](https://opendata.aemet.es/centrodedescargas/altaUsuario?))
##  id: parámetros para realizar la consulta (puede no ser necesario)
#####################################################################################################################################################
get_response <- function(url_base, url = "", api_key, id = ""){
call <- paste(url_base, url, id, sep = "/")
call <- param_set(call, key = "api_key", value = api_key)
response <- GET(call)
# Si obtenemos un json, en el caso de AEMET, significa que en el json devuelto está la siguiente url que debemos consultar para obtener los datos
if(http_type(response) == "application/json"){
resp_text <- content(response, "text")
body <- fromJSON(resp_text, flatten = TRUE)
response <- get_response(body$datos, api_key = api_key)
}
# Comprobar si la petición es errónea y en caso afirmativo devolver un mensaje
if(http_error(response)){
resp_text <- content(response, "text")
body <- fromJSON(resp_text, flatten = TRUE)
sprintf(
"GitHub API request failed [%s]\n%s\n",
status_code(response),
body$message
)
}
response
}
################################################### Función que convierte Lat y long en formato (º, Min, Seg) a decimal###############################
latitud_longitud_decimal <- function(grados, minutos, segundos){
lat_lon <- grados + (1/60)*minutos + (1/3600)*segundos
}
######################################################## Radiación extraterrestre diaria ##############################################################################
##### El siguiente script sólo será necesario ejecutarlo una vez. Una vez se tengan los csv en el servidor no es necesario ejecutarlo más ######
################################################## Consulta municipios para los que el AEMET elabora predicciones y genera un csv en "municipios.csv" ################################
municipios_url <- "maestro/municipios"
get_municipios <- get_response(url_base, municipios_url, api_key)
municipios_text <- content(get_municipios, "text")
datos_municipios <- fromJSON(municipios_text, flatten = TRUE)
datos_municipios$id <- substr(datos_municipios$id, 3, 7) # Las consultas que requieren el id, requieren de la eliminación de la palabra "id"
write.csv(datos_municipios, "municipios.csv")
###### SCRIPT que obtiene las estaciones meteorológicas disponibles y genera un csv en "estaciones_meteorologicas.csv" #################
estaciones_url <- "valores/climatologicos/inventarioestaciones/todasestaciones"
get_estaciones <- get_response(url_base, estaciones_url, api_key = api_key)
estaciones_text <- content(get_estaciones, "text")
datos_estaciones_df <- fromJSON(estaciones_text, flatten = TRUE)
datos_estaciones_df <- datos_estaciones_df %>%
mutate(grados_lat = as.numeric(substr(latitud, 1, 2)),
minutos_lat = as.numeric(substr(latitud, 3, 4)),
segundos_lat = as.numeric(substr(latitud, 5, 6)),
orient_lat = substr(latitud,7,7),
latitud_dec = latitud_longitud_decimal(grados_lat,
minutos_lat,
segundos_lat),
grados_lon =  as.numeric(substr(longitud, 1, 2)),
minutos_lon = as.numeric(substr(longitud, 3, 4)),
segundos_lon = as.numeric(substr(longitud, 5, 6)),
orient_lon = substr(longitud,7,7),
longitud_dec = latitud_longitud_decimal(grados_lon,
minutos_lon,
segundos_lon))
estaciones_lat_W <- which(datos_estaciones_df$orient_lon == "W")
estaciones_lon_S <- which(datos_estaciones_df$orient_lon == "S")
datos_estaciones_df$longitud_dec[estaciones_lat_W] <- - datos_estaciones_df$longitud_dec[estaciones_lat_W]
datos_estaciones_df$latitud_dec[estaciones_lon_S] <- - datos_estaciones_df$latitud_dec[estaciones_lon_S]
# Corregir indicativo incorrecto
est <- which(datos_estaciones_df$indicativo == "4121C")
datos_estaciones_df$indicativo[est] <- "4121"
write.csv(datos_estaciones_df, "estaciones_meteorologicas.csv")
################# ESTACIONES RADIACIÓN SOLAR ##########################
radiacion_url <- "red/especial/radiacion"
get_radiacion <- get_response(url_base, radiacion_url, api_key)
radiacion_text <- content(get_radiacion, "text")
datos_rad <- substring(radiacion_text, 32)
csv_rad <- read_delim(datos_rad, delim =  ";")
malaga <- which(csv_rad$Estación == "Málaga")
csv_rad$Indicativo[malaga] <- paste0(csv_rad$Indicativo[malaga], "X")
estaciones_radiacion <- csv_rad %>%
select(Estación, indicativo = Indicativo) %>%
left_join(datos_estaciones_df, by = "indicativo")
# Datos completados con:
# http://www.aemet.es/es/eltiempo/observacion/radiacion/ozono?l=zaragoza&f=ozono
# http://www.aemet.es/es/eltiempo/observacion/radiacion/radiacion?l=maspalomas
# http://www.aemet.es/es/eltiempo/observacion/radiacion/radiacion?l=badajoz
zaragoza <- which(estaciones_radiacion$Estación == "Zaragoza")
maspalomas <- which(estaciones_radiacion$Estación == "Maspalomas")
badajoz <- which(estaciones_radiacion$Estación == "Badajoz")
columnas_na <- c(zaragoza, maspalomas, badajoz)
estaciones_radiacion$altitud[columnas_na] <- c( 258, 45, 175 )
estaciones_radiacion$latitud[columnas_na] <- c("413800N", "274529N", "385360N")
estaciones_radiacion$grados_lat[columnas_na] <- c(41, 27, 38)
estaciones_radiacion$minutos_lat[columnas_na] <- c(38, 45, 53)
estaciones_radiacion$segundos_lat[columnas_na] <- c(00, 29, 60)
estaciones_radiacion$orient_lat[columnas_na] <- c("N", "N", "N")
estaciones_radiacion$latitud_dec[columnas_na] <- c(latitud_longitud_decimal(41, 38, 00),
latitud_longitud_decimal(27, 45, 53),
latitud_longitud_decimal(38, 53, 60))
estaciones_radiacion$longitud[columnas_na] <- c("005256W", "153432W", "070046W")
estaciones_radiacion$grados_lon[columnas_na] <- c(00, 15, 07)
estaciones_radiacion$minutos_lon[columnas_na] <- c(52, 34, 00)
estaciones_radiacion$segundos_lon[columnas_na] <- c(56, 32, 46)
estaciones_radiacion$orient_lon[columnas_na] <- c("W", "W", "W")
estaciones_radiacion$longitud_dec[columnas_na] <- c(-latitud_longitud_decimal(00, 52, 56),
-latitud_longitud_decimal(15, 34 ,32),
-latitud_longitud_decimal(07, 00, 46))
write.csv(estaciones_radiacion, "estaciones_radiacion.csv")
runApp()
runApp()
runApp()
runApp()
print (estaciones2)
print ("lat")
estaciones2 <- estaciones %>%
mutate(distancia = distancia(latitud_dec, longitud_dec, lat, lon)) %>%
filter(distancia == min(distancia))
print ("estaciones2")
runApp()
runApp()
runApp()
runApp()
runApp()
estaciones_rad <- read_csv("estaciones_radiacion.csv")
estaciones_rad <- read.csv("estaciones_radiacion.csv")
estaciones_rad <- read_csv("estaciones_radiacion.csv",stringsAsFactors=FALSE, fileEncoding="latin1")
estaciones_rad <- read.csv("estaciones_radiacion.csv",stringsAsFactors=FALSE, fileEncoding="latin1")
estaciones_rad
runApp()
estaciones2$indicativo
estaciones2
estaciones2 <- estaciones %>%
mutate(distancia = distancia(latitud_dec, longitud_dec, lat, lon)) %>%
filter(distancia == min(distancia))
estaciones2
df_observacion <- observacion_conv_df(id_estacion = "6155A", fecha = hoy, hora1 = "00h", hora2 = "10h")
df_observacion
hoy <-  as.character(Sys.Date())
runApp()
runApp()
runApp()
hoy <-  as.character(Sys.Date())
runApp()
df_observacion <- observacion_conv_df(id_estacion = "6156X", fecha = hoy, hora1 = "00h", hora2 = "10h")
df_observacion
descargarObservacionesConvencionales()
descargarObservacionesConvencionales()
estaciones <- obtenerEstaciones("MALAGA")
descargarObservacionesConvencionales ()
descargarObservacionesConvencionales ()
descargarPrediccionesHorarias ()
descargarObservacionesRadiacion ()
runApp()
runApp()
# Se abre el csv de observaciones convencionales de la estación más cercana al CSV de la 1ª hora programada de descarga
obs_conv_hora1_df <-  read_csv(file = paste ( "aemet/",obs_conv_hora1))
runApp()
obs_conv_hora1 <- paste("observacion_convencional","id", id_estacion, fecha, hora1, sep = "_")
obs_conv_hora1 <- paste0(obs_conv_hora1,".csv")
# Se abre el csv de observaciones convencionales de la estación más cercana al CSV de la 1ª hora programada de descarga
obs_conv_hora1_df <-  read_csv(file = paste ( "aemet/",obs_conv_hora1))
obs_conv_hora2 <- paste("observacion_convencional","id", id_estacion, fecha, hora2, sep = "_")
df_observacion <- observacion_conv_df(id_estacion = 6155A, fecha = hoy, hora1 = "00h", hora2 = "10h")
df_observacion <- observacion_conv_df(id_estacion = "6155A", fecha = hoy, hora1 = "00h", hora2 = "10h")
df_observacion <- observacion_conv_df(id_estacion = "6155A", fecha = hoy, hora1 = "00h", hora2 = "10h")
hoy <-  as.character(Sys.Date())
runApp()
observacion_convencional <- function(base, observacion_convencional, api_key, idema) {
get_observacion_convencional <- get_response(base, observacion_convencional, api_key, id = idema)
observacion_text <- content(get_observacion_convencional, "text")
obs_convencional_df <- fromJSON(observacion_text, flatten = TRUE)
fecha <- as.character(Sys.Date(-1))
hora <- paste0(format(Sys.time(), "%H"),"h")
nombre_csv <- paste("observacion_convencional","id", idema, fecha, hora, sep = "_")
nombre_csv <- paste0(nombre_csv,".csv")
write.csv(obs_convencional_df, file = paste ( "aemet/",nombre_csv), row.names = FALSE)
obs_convencional_df
}
descargarObservacionesConvencionales()
observacion_convencional <- function(base, observacion_convencional, api_key, idema) {
get_observacion_convencional <- get_response(base, observacion_convencional, api_key, id = idema)
observacion_text <- content(get_observacion_convencional, "text")
obs_convencional_df <- fromJSON(observacion_text, flatten = TRUE)
fecha <- as.character(Sys.Date()-1)
hora <- paste0(format(Sys.time(), "%H"),"h")
nombre_csv <- paste("observacion_convencional","id", idema, fecha, hora, sep = "_")
nombre_csv <- paste0(nombre_csv,".csv")
write.csv(obs_convencional_df, file = paste ( "aemet/",nombre_csv), row.names = FALSE)
obs_convencional_df
}
descargarObservacionesConvencionales()
estaciones <- obtenerEstaciones("MALAGA")
descargarObservacionesConvencionales ()
descargarObservacionesConvencionales ()
observacion_convencional <- function(base, observacion_convencional, api_key, idema) {
get_observacion_convencional <- get_response(base, observacion_convencional, api_key, id = idema)
observacion_text <- content(get_observacion_convencional, "text")
obs_convencional_df <- fromJSON(observacion_text, flatten = TRUE)
fecha <- as.character(Sys.Date()-1)
hora <- paste0(format(Sys.time(), "%H"),"h")
nombre_csv <- paste("observacion_convencional","id", idema, fecha, hora, sep = "_")
nombre_csv <- paste0(nombre_csv,".csv")
write.csv(obs_convencional_df, file = paste ( "aemet/",nombre_csv), row.names = FALSE)
obs_convencional_df
}
descargarObservacionesConvencionales()
format(Sys.time()
)
observacion_convencional <- function(base, observacion_convencional, api_key, idema) {
get_observacion_convencional <- get_response(base, observacion_convencional, api_key, id = idema)
observacion_text <- content(get_observacion_convencional, "text")
obs_convencional_df <- fromJSON(observacion_text, flatten = TRUE)
fecha <- as.character(Sys.Date()-1)
#hora <- paste0(format(Sys.time(), "%H"),"h")
hora <- "16:28:11"
nombre_csv <- paste("observacion_convencional","id", idema, fecha, hora, sep = "_")
nombre_csv <- paste0(nombre_csv,".csv")
write.csv(obs_convencional_df, file = paste ( "aemet/",nombre_csv), row.names = FALSE)
obs_convencional_df
}
################# Descarga de observaciones convencionales del AEMET de una estación meteorológica#############################################
## idema  indicativo de la estación que se quiere consultar
## observacion_convencional URL observación convencional
observacion_convencional <- function(base, observacion_convencional, api_key, idema) {
get_observacion_convencional <- get_response(base, observacion_convencional, api_key, id = idema)
observacion_text <- content(get_observacion_convencional, "text")
obs_convencional_df <- fromJSON(observacion_text, flatten = TRUE)
fecha <- as.character(Sys.Date())
hora <- paste0(format(Sys.time(), "%H"),"h")
hora <- "00:00:00"
nombre_csv <- paste("observacion_convencional","id", idema, fecha, hora, sep = "_")
nombre_csv <- paste0(nombre_csv,".csv")
write.csv(obs_convencional_df, file = paste ( "aemet/",nombre_csv), row.names = FALSE)
obs_convencional_df
}
descargarObservacionesConvencionales
descargarObservacionesConvencionales()
################# Descarga de observaciones convencionales del AEMET de una estación meteorológica#############################################
## idema  indicativo de la estación que se quiere consultar
## observacion_convencional URL observación convencional
observacion_convencional <- function(base, observacion_convencional, api_key, idema) {
get_observacion_convencional <- get_response(base, observacion_convencional, api_key, id = idema)
observacion_text <- content(get_observacion_convencional, "text")
obs_convencional_df <- fromJSON(observacion_text, flatten = TRUE)
fecha <- as.character(Sys.Date())
hora <- paste0(format(Sys.time()-10, "%H"),"h")
nombre_csv <- paste("observacion_convencional","id", idema, fecha, hora, sep = "_")
nombre_csv <- paste0(nombre_csv,".csv")
write.csv(obs_convencional_df, file = paste ( "aemet/",nombre_csv), row.names = FALSE)
obs_convencional_df
}
descargarObservacionesConvencionales ()
descargarObservacionesConvencionales ()
descargarObservacionesConvencionales ()
Sys.time()-10
Sys.time()
Sys.Date()-1
observacion_convencional <- function(base, observacion_convencional, api_key, idema) {
get_observacion_convencional <- get_response(base, observacion_convencional, api_key, id = idema)
observacion_text <- content(get_observacion_convencional, "text")
obs_convencional_df <- fromJSON(observacion_text, flatten = TRUE)
fecha <- as.character(Sys.Date())
hora <- paste0(format(Sys.time(), "%H"),"h")
nombre_csv <- paste("observacion_convencional","id", idema, fecha, hora, sep = "_")
nombre_csv <- paste0(nombre_csv,".csv")
write.csv(obs_convencional_df, file = paste ( "aemet/",nombre_csv), row.names = FALSE)
obs_convencional_df
}
descargarObservacionesConvencionales ()
descargarObservacionesConvencionales ()
observacion_convencional <- function(base, observacion_convencional, api_key, idema) {
get_observacion_convencional <- get_response(base, observacion_convencional, api_key, id = idema)
observacion_text <- content(get_observacion_convencional, "text")
obs_convencional_df <- fromJSON(observacion_text, flatten = TRUE)
fecha <- as.character(Sys.Date())
hora <- paste0(format(Sys.time(), "%H"),"h")
nombre_csv <- paste("observacion_convencional","id", idema, fecha, hora, sep = "_")
nombre_csv <- paste0(nombre_csv,".csv")
write.csv(obs_convencional_df, file = paste ( "aemet/",nombre_csv), row.names = FALSE)
obs_convencional_df
}
runApp()
runApp()
runApp()
df_observacion <- observacion_conv_df(id_estacion = 61720, fecha = hoy, hora1 = "00h", hora2 = "10h")
observacion_conv_df(id_estacion = 61720, fecha = hoy, hora1 = "00h", hora2 = "10h")
obs_conv_hora2
obs_conv_hora1 <- paste("observacion_convencional","id", id_estacion, fecha, hora1, sep = "_")
observacion_conv_df <- function(id_estacion, fecha, hora1, hora2) {
ayer <- as.character(as.Date(fecha) - 1)
obs_conv_hora1 <- paste(" observacion_convencional","id", id_estacion, fecha, hora1, sep = "_")
obs_conv_hora1 <- paste0(obs_conv_hora1,".csv")
# Se abre el csv de observaciones convencionales de la estación más cercana al CSV de la 1ª hora programada de descarga
obs_conv_hora1_df <-  read_csv(file = paste ( "aemet/",obs_conv_hora1))
obs_conv_hora2 <- paste(" observacion_convencional","id", id_estacion, fecha, hora2, sep = "_")
obs_conv_hora2 <- paste0(obs_conv_hora2,".csv")
# Se abre el csv de observaciones convencionales de la estación más cercana al CSV de la 2º hora programada de descarga
obs_conv_hora2_df <- read_csv(file = paste ( "aemet/",obs_conv_hora2))
obs_conv_hora1_df <- obs_conv_hora1_df %>%
mutate(dia = as.Date(fint)) %>%
filter(dia == ayer)
obs_conv_hora2_df <- obs_conv_hora2_df %>%
mutate(dia = as.Date(fint)) %>%
filter(dia == ayer)
obs_dia_df <- merge.data.frame(obs_conv_hora1_df, obs_conv_hora2_df, by = colnames(obs_conv_hora1_df), all =  TRUE) %>%
mutate(hora = hour(fint))
obs_dia_df
}
df_observacion <- observacion_conv_df(id_estacion = estaciones2$indicativo, fecha = hoy, hora1 = "00h", hora2 = "10h")
sustitucion <- function(df){
descripcion <- c("Despejado", "Poco nuboso", "Intervalos nubosos", "Nuboso", "Muy nuboso", "Cubierto", "Nubes altas", "Intervalos nubosos con lluvia", "Nuboso con lluvia", "Muy nuboso con lluvia", "Cubierto con lluvia", "Intervalos nubosos con nieve", "Nuboso con nieve", "Muy nuboso con nieve",  "Cubierto con nieve", "Chubascos", "Tormenta", "Granizo", "Bruma", "Niebla", "Calma")
valor <- c(1, 0.8, 0.7, 0.6, 0.4, 0.2, 0.8, 0.6, 0.4, 0.2, 0.2, 0.6, 0.4, 0.2, 0.2, 0.4, 0.2, 0.4, 0.5, 0.4, 0.8)
for (d in 1:length(descripcion)){
df$estadoCielo.descripcion[which(df$estadoCielo.descripcion == descripcion[d])] <- valor[d]
}
df
}
df_prediccion_horaria
view (df_prediccion_horaria)
sustitucion(df_prediccion_horaria)
view sustitucion(df_prediccion_horaria)
view sustitucion(df_prediccion_horaria))
view (sustitucion(df_prediccion_horaria))
sustitucion <- function(df){
descripcion <- c("Despejado", "Poco nuboso", "Intervalos nubosos", "Nuboso", "Muy nuboso", "Cubierto", "Nubes altas", "Intervalos nubosos con lluvia", "Nuboso con lluvia", "Muy nuboso con lluvia", "Cubierto con lluvia", "Intervalos nubosos con nieve", "Nuboso con nieve", "Muy nuboso con nieve",  "Cubierto con nieve", "Chubascos", "Tormenta", "Granizo", "Bruma", "Niebla", "Calma", "Intervalos nubosos con lluvia escasa", "Muy nuboso con lluvia escasa",  "Nuboso con lluvia escasa", "Cubierto con lluvia escasa")
valor <- c(1, 0.8, 0.7, 0.6, 0.4, 0.2, 0.8, 0.6, 0.4, 0.2, 0.2, 0.6, 0.4, 0.2, 0.2, 0.4, 0.2, 0.4, 0.5, 0.4, 0.8, 0.65, 0.25, 0.45, 0.25)
for (d in 1:length(descripcion)){
df$estadoCielo.descripcion[which(df$estadoCielo.descripcion == descripcion[d])] <- valor[d]
}
df
}
view (sustitucion(df_prediccion_horaria))
df_valores_cielo <- sustitucion(df_prediccion_horaria)
Predicc_cloudy_10_11_12 <- df_valores_cielo %>%
filter(estadoCielo.pediodo %in% c(10:12))%>%
select(estadoCielo.descripcion) %>%
summarise(Predicc_cloudy_10_11_12 = mean(estadoCielo.descripcion, na.rm = T))%>%
unlist() / 100
df_valores_cielo
Predicc_cloudy_10_11_12 <- df_valores_cielo %>%
filter(estadoCielo.pediodo %in% c(10:12))%>%
select(estadoCielo.descripcion) %>%
summarise(Predicc_cloudy_10_11_12 = mean(estadoCielo.descripcion, na.rm = T))%>%
unlist() / 100
df_valores_cielo %>%
filter(estadoCielo.periodo %in% c(10:12)
)
Predicc_cloudy_10_11_12 <- df_valores_cielo %>%
filter(estadoCielo.periodo %in% c(10:12))%>%
select(estadoCielo.descripcion)
)
Predicc_cloudy_10_11_12
Predicc_cloudy_10_11_12
Predicc_cloudy_10_11_12 <- df_valores_cielo %>%
filter(estadoCielo.periodo %in% c(10:12))%>%
select(estadoCielo.descripcion) %>%
summarise(Predicc_cloudy_10_11_12 = mean(estadoCielo.descripcion, na.rm = T))
Predicc_cloudy_10_11_12
Predicc_cloudy_10_11_12 <- df_valores_cielo %>%
filter(estadoCielo.periodo %in% c(10:12))%>%
select(estadoCielo.descripcion) %>%
summarise(Predicc_cloudy_10_11_12 = mean(estadoCielo.descripcion))%>%
unlist() / 100
Predicc_cloudy_10_11_12 <- df_valores_cielo %>%
filter(estadoCielo.periodo %in% c(10:12))%>%
select(estadoCielo.descripcion) %>%
summarise(Predicc_cloudy_10_11_12 = mean(as.numeric(estadoCielo.descripcion), na.rm = T))%>%
unlist() / 100
Predicc_cloudy_10_11_12
Predicc_cloudy_13_14_15 <- df_valores_cielo %>%
filter(estadoCielo.periodo %in% c(13:15))%>%
select(estadoCielo.descripcion) %>%
summarise(Predicc_cloudy_13_14_15 = mean(as.numeric(estadoCielo.descripcion), na.rm = T))%>%
unlist()
Predicc_cloudy_13_14_15
Predicc_cloudy_sky_day_0_1 <- df_valores_cielo %>%
summarise(Predicc_cloudy_sky_day_0_1 = mean(as.numeric(estadoCielo.descripcion), na.rm = T))%>%
unlist()
Predicc_cloudy_sky_day_0_1
Predicc_cloudy_10_11_12 <- df_valores_cielo %>%
+     filter(estadoCielo.periodo %in% c(10:12))%>%
+     select(estadoCielo.descripcion) %>%
+     summarise(Predicc_cloudy_10_11_12 = mean(as.numeric(estadoCielo.descripcion), na.rm = T))%>%
+     unlist()
Predicc_cloudy_10_11_12 <- df_valores_cielo %>%
filter(estadoCielo.periodo %in% c(10:12))%>%
select(estadoCielo.descripcion) %>%
summarise(Predicc_cloudy_10_11_12 = mean(as.numeric(estadoCielo.descripcion), na.rm = T))%>%
unlist()
Predicc_cloudy_10_11_12
view(df_solar_energy)
