shiny::runApp('optimalLocationPVRoof')
catalago
catalago
runApp('optimalLocationPVRoof')
catalogo
catalago <- loadImages ()
runApp('optimalLocationPVRoof')
ctg
knitr::opts_chunk$set(echo = TRUE)
#knitr::knit_hooks$set(webgl = hook_webgl)
knitr::include_graphics("lago.png")
# plot catalog
ctg <- catalog(files)
getwd()
dataFiles <- "data/MALAGA"
files<-list.files(path=dataFiles, full.names = TRUE)
#knitr::knit_hooks$set(webgl = hook_webgl)
knitr::include_graphics("lago.png")
# plot catalog
ctg <- catalog(files)
plot(ctg, map = TRUE)
extent (ctg)
ctg
rasterToPolygons (LAScatalog)
rasterToPolygons (ctg)
as.spatial (ctg)
runApp('optimalLocationPVRoof')
spatialpolygons (as.spatial (ctg))
coordinates(as.spatial (ctg))
runApp('optimalLocationPVRoof')
shiny::runApp('optimalLocationPVRoof')
shiny::runApp('optimalLocationPVRoof')
library (lidR)
install.packages("lidR")
shiny::runApp('optimalLocationPVRoof')
install.packages("lidR")
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
library(shiny)
library(leaflet)
library(shinyWidgets)
library(shinydashboard)
library(raster)
library (rgdal)
library(RStoolbox)
library(RGISTools)
library(zoom)
library(excelR)
library(leaflet)
library(tidyverse)
library(ggplot2)
library(widgetframe)
library (lidR)
library(rgl)
library(rasterVis)
library(shiny)
library(shinythemes)
library(ggmap)
library(leaflet.extras)
library(sp)
runApp()
runApp()
runApp()
files
runApp()
runApp()
runApp()
runApp()
class (areaDS)
runApp()
runApp()
val_ <- unique(cC)
val_
values (cC)
cC[cC==1]
slope>=0 & slope<10
values (slope>=0 & slope<10)
values (slope)
values (aspect)
runApp()
runApp()
values (slope>=0 & slope<10)
values (slope>=0 & slope<10)
na.omit (values (slope>=0 & slope<10))
values (aspect)
na.omit (values (slope>=0 & slope<10))
na.omit (values (slope) )
na.omit (values (aspect) )
v <-  val_[1]
v
slopes <- slope [cC==v]
slopes
cC==1
values (cC==1)
cC
cC [cC==1]
sum (cC [cC==1])
slopes
values (cC)
na.omit (values (cC))
na.omit (values(slope))
slopes
slope [cC==v]
v
na.omit (values(cC))
cC
slope
na.omit (values(cC))
sum (cC==1)
sum (values(CC==1))
sum (values(cC==1))
sum (na.omit(values(cC==1)))
slopes
slope
na.omit(values(slope))
na.omit(values(cC))
na.omit(values(slope))
slopes
na.omit(values(cC))
na.omit(values(slope))
slopes
7.2558579
7.0085360
slopes <- slope [cC==v]
slopes
na.omit(values(cC))
na.omit(values(slope))
16.9356406 13.0457320 12.4210376 11.6399682 11.4100717 11.4742899 11.1263796 11.0369994 13.5631934 20.9227142 28.8169707 35.0124242
[13] 40.6169768
slopes
na.omit(values(slope))
na.omit(values(cC))
na.omit(values(slope))
v
addAVGCordsToDataSet
slopes <- slope [cC==v]
slopes
16.9356406 13.0457320 12.4210376 11.6399682 11.4100717 11.4742899 11.1263796 11.0369994 13.5631934 20.922714
slope [cC==v]
cC [cC==1]
which [cC==1]
which (cC==1)
cC [cC==1]
which [cC [cC==1]]
which (cC [cC==1])
which(cC==1)[1]
which (na.omit (values (cc==1)) )
which (na.omit (values (cC==1)) )
indexes <- which (na.omit (values (cC==1)) )
indexes
slope [1]
slope [indexes]
slope [na.omit(indexes)]
slope [na.omit(values(indexes))]
slope
values (slope)
indexes
indexes <- which (values (cC==1) )
indexes
slopes [indexes]
na.omit (slopes)
na.omit (slope)
values (na.omit (slope))
na.omit (values(slope))
slope [1725]
slopes
slope [1725]
indexes <- which (values (cC==1) )
na.omit (values (cC))
na.omit (values (cC))
1  1  1  1  1  1  1  1  1  1  1  1  1
indexes <- which (values (cC==1) )
indexes
cC[1725]
cC[1724]
cC[1000]
cC[6034]
cC[6031]
slope[1725]
na.omit (values(slope))
coords (na.omit(values()))
indexes
slope[1724]
slope[1725]
cC[1725]
cC[1724]
slope
values (slope)
indexes
cC[4303]
cC[3448]
cC[3446]
slope [indexes]
slope [1725]
avgSlope <- mean(slope [indexes])
avgSlope
avgAspect <- mean(aspect [indexes])
avgAspect
aspect [indexes]
slope [indexes]
indexes
coordinates (slope[indexes])
coordinates [slope]
coordinates (slope)
coordinates (slope) [indexes]
coordinates (slope) [indexes] [1,]
coordinates (slope) [indexes] [,1]
slope
coordinates (slope)
coordinates (slope) [indexes]
oordinates (slope) [3]
coordinates (slope) [3]
coordinates (slope)
coordinates (slope) [indexes,]
coordinates (slope) [indexes,]
mean(coordinates (slope) [indexes,])
mean(coordinates (slope) [indexes,1])
mean(coordinates (slope) [indexes,2])
coordinates (slope) [indexes,1]
coordinates (slope) [indexes,2]
coordinates (slope) [indexes,1]
coordinates (slope) [indexes,2]
lats<- coordinates (slope) [indexes,1]
lats [1]
lng <- lngs[1]
lngs <- coordinates (slope) [indexes,2]
lng <- lngs[1]
lat1
lat1 <- lats[1]
lng <- lngs[1]
lat1
lng1
lng
lats<- coordinates (slope) [indexes,1]
lngs <- coordinates (slope) [indexes,2]
lat1 <- lats[1]
lng1 <- lngs[1]
lat1
lng
slope
utms <- SpatialPoints(data[, c(lng1, lat1)], proj4string=CRS("+proj=utm +zone=30")) #create UTM matrix
utms <- SpatialPoints(data[c(lng1, lat1)], proj4string=CRS("+proj=utm +zone=30")) #create UTM matrix
im
catalogo [i,]
longlats <- spTransform(c(lat1,lng1), CRS("+proj=longlat"))
c(lat1,lng1)
coordinates (slope) [indexes,]
longlats <- spTransform(coordinates (slope) [indexes,], CRS("+proj=longlat"))
xy <- data.frame(x=354521, y=7997417.8)sss
xy <- data.frame(coordinates (slope) [indexes,])
xy
dataFrameCoords <- data.frame(coordinates (slope) [indexes,])
longlats <- spTransform(dataFrameCoords, CRS("+proj=longlat")) #transform
dataFrameCoords
colnames(dataFrameCoords) <- c("x_coord","y_coord")
dataFrameCoords
cord.dec = SpatialPoints(cbind(dataFrameCoords$x_coord, dataFrameCoords$y_coord), proj4string=CRS("+proj=longlat"))
cord.dec
dataFrameCoords
cord.UTM = SpatialPoints(cbind(dataFrameCoords$x_coord, dataFrameCoords$y_coord), proj4string=CRS("+proj=utm +zone=30 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs" ))
cord.UTM
cord.UTM <- spTransform(cord.dec, CRS("+proj=longlat"))
cord.UTM
ord.dec <- spTransform(cord.UTM, CRS("+proj=longlat"))
ord.dec
cord.UTM = SpatialPoints(cbind(dataFrameCoords$x_coord, dataFrameCoords$y_coord), proj4string=CRS("+proj=utm +zone=30 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs" ))
cord.dec <- spTransform(cord.UTM, CRS("+proj=longlat"))
cord.dec
values (cord.dec)
cord.dec[1]
cord.dec[[1]]
cord.dec[[1,]]
cord.dec[[1]]
cord.dec[1,]
dfT <- as.data.frame(cord.dec)
dfT
dfT [1]
dfT [1,1]
dfT [1,2]
runApp()
dataFrameCoords <- data.frame(coordinates (slope) [indexes,])
dataFrameCoords
colnames(dataFrameCoords) <- c("x_coord","y_coord")
dataFrameCoords
cord.UTM = SpatialPoints(cbind(dataFrameCoords$x_coord, dataFrameCoords$y_coord), proj4string=CRS("+proj=utm +zone=30 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs" ))
cord.dec <- spTransform(cord.UTM, CRS("+proj=longlat"))
dfT <- as.data.frame(cord.dec)
latsArray <- dfT [1,2]
lngsArray <- dfT [1,1]
runApp()
indexes
row (dataFrameCoords)
nrow(dataFrameCoords)
ncol(dataFrameCoords)
dataFrameCoords
runApp()
coordinates (slope)
coordinates (slope)
dataFrameCoords <- as.data.frame(coordinates (slope) [indexes,])
dataFrameCoords
runApp()
runApp()
coordinates (slope) [indexes,]
coordinates (slope) [indexes,]
class(coordinates (slope) [indexes,])
runApp()
cC
dS
ds
areaDS
runApp()
runApp()
coords <- coordinates (slope) [indexes,]
coords
coords[1,]
coords[1]
coords[,1]
cord.UTM = SpatialPoints(cbind(coords[,1], coords[,2]), proj4string=CRS("+proj=utm +zone=30 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs" ))
cord.dec <- spTransform(cord.UTM, CRS("+proj=longlat"))
cord.dec
dfT <- as.data.frame(cord.dec)
dfT
runApp()
coords
length(coords)
runApp()
runApp()
coords <- coordinates (slope) [indexes,]
coords
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
print (inclinacion)
print (orientacion)
runApp()
as.numeric("3.81")
runApp()
## RadiaciÃ³n
MA_R <- read_table2("Datos Malaga/MA_R.sal",
col_names = FALSE)
runApp()
runApp()
orientacion <- orientacion -180
runApp()
potencia_lamina_delgada <- function(area, potencia){
potencia <- potencia * area/10
}
runApp()
runApp()
aspect
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
areaDS
runApp()
dataFrameCoords
row (dataFrameCoords)
runApp()
if (inclinacion == 10) {
inclinacion <- 30
}
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
print (orientacion)
inclinacion <- 30
runApp()
print ("orientacion")
runApp()
if (inclinacion <= 10) {
inclinacion <- 30
}
inclinacion <- 30
if (inclinacion <= 10) {
inclinacion <- 30
}
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
slope
dim (slope)
runApp()
shiny::runApp()
