library(rasterVis)
library(shiny)
library(shinythemes)
getwd()
dataFiles <- "data/MALAGA"
files<-list.files(path=dataFiles, full.names = TRUE)
install.packages("lidR")
install.packages("lidR")
shiny::runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp()
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp()
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp()
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp()
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
library(sp)
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp()
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp()
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp()
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
knitr::opts_chunk$set(echo = TRUE)
getwd()
dataFiles <- "data/MALAGA"
files<-list.files(path=dataFiles, full.names = TRUE)
#knitr::knit_hooks$set(webgl = hook_webgl)
knitr::include_graphics("lago.png")
# plot catalog
ctg <- catalog(files)
plot(ctg, map = TRUE)
ctg
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp()
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp()
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp()
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp()
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp()
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp()
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp()
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
plot (a)
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
shiny::runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
install.packages("shinyjs")
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp()
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
clear
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp()
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp()
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp()
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp()
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp()
runApp()
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp()
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp()
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp()
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
shiny::runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
install.packages("shinyWidgets")
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
install.packages("shinydashboard")
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
str_contains("hello", "hel")
str_contains("hello", "hel")
grep(,'strings')
ax <- c("hola","adios")
grep(ax,'strings')
grep(ax,'strings')
c
ax
grep(ax,'strings')
hola in ax
'hola' in ax
"hola" in ax
"hola" %in% ax
"holaa" %in% ax
"hol" %in% ax
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp()
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp()
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
shiny::runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof')
# GETTING ONLY ATTRIBUTES NEEDED FOR THE PREDICTION SYSTEM
examples <- full_dataset %>% select(gd_previo,
kd_previo,
t9_12_diaprevio,
t13_15_diaprevio,
h8_diaprevio,
h14_diaprevio,
t_dia_diaprevio,
preciptac_dia_diaprevio,
Predicc_temp_day_C,
Predicc_Relative_humidity_day_0_1,
Predicc_cloudy_sky_day_0_1,
Predicc_temp_10_11_12_C,
Predicc_temp_13_14_15_C,
Predicc_R_hum_10_11_12,
Predicc_R_hum_13_14_15,
Predicc_cloudy_10_11_12,
Predicc_cloudy_13_14_15,
kd, # will be predicted with a regression model
Today_cluster14_experts) # will be predicted with a classification model
# GETTING ONLY ATTRIBUTES NEEDED FOR THE PREDICTION SYSTEM
examples <- full_dataset %>% select(gd_previo,
kd_previo,
t9_12_diaprevio,
t13_15_diaprevio,
h8_diaprevio,
h14_diaprevio,
t_dia_diaprevio,
preciptac_dia_diaprevio,
Predicc_temp_day_C,
Predicc_Relative_humidity_day_0_1,
Predicc_cloudy_sky_day_0_1,
Predicc_temp_10_11_12_C,
Predicc_temp_13_14_15_C,
Predicc_R_hum_10_11_12,
Predicc_R_hum_13_14_15,
Predicc_cloudy_10_11_12,
Predicc_cloudy_13_14_15,
kd, # will be predicted with a regression model
Today_cluster14_experts) # will be predicted with a classification model
library(tidyverse)
# GETTING ONLY ATTRIBUTES NEEDED FOR THE PREDICTION SYSTEM
examples <- full_dataset %>% select(gd_previo,
kd_previo,
t9_12_diaprevio,
t13_15_diaprevio,
h8_diaprevio,
h14_diaprevio,
t_dia_diaprevio,
preciptac_dia_diaprevio,
Predicc_temp_day_C,
Predicc_Relative_humidity_day_0_1,
Predicc_cloudy_sky_day_0_1,
Predicc_temp_10_11_12_C,
Predicc_temp_13_14_15_C,
Predicc_R_hum_10_11_12,
Predicc_R_hum_13_14_15,
Predicc_cloudy_10_11_12,
Predicc_cloudy_13_14_15,
kd, # will be predicted with a regression model
Today_cluster14_experts) # will be predicted with a classification model
# GETTING ONLY ATTRIBUTES NEEDED FOR THE PREDICTION SYSTEM
examples <- full_dataset %>% select(gd_previo,
kd_previo,
t9_12_diaprevio,
t13_15_diaprevio,
h8_diaprevio,
h14_diaprevio,
t_dia_diaprevio,
preciptac_dia_diaprevio,
Predicc_temp_day_C,
Predicc_Relative_humidity_day_0_1,
Predicc_cloudy_sky_day_0_1,
Predicc_temp_10_11_12_C,
Predicc_temp_13_14_15_C,
Predicc_R_hum_10_11_12,
Predicc_R_hum_13_14_15,
Predicc_cloudy_10_11_12,
Predicc_cloudy_13_14_15,
kd, # will be predicted with a regression model
Today_cluster14_experts) # will be predicted with a classification model
full_dataset <- read.csv("full_dataset.csv")
# GETTING ONLY ATTRIBUTES NEEDED FOR THE PREDICTION SYSTEM
examples <- full_dataset %>% select(gd_previo,
kd_previo,
t9_12_diaprevio,
t13_15_diaprevio,
h8_diaprevio,
h14_diaprevio,
t_dia_diaprevio,
preciptac_dia_diaprevio,
Predicc_temp_day_C,
Predicc_Relative_humidity_day_0_1,
Predicc_cloudy_sky_day_0_1,
Predicc_temp_10_11_12_C,
Predicc_temp_13_14_15_C,
Predicc_R_hum_10_11_12,
Predicc_R_hum_13_14_15,
Predicc_cloudy_10_11_12,
Predicc_cloudy_13_14_15,
kd, # will be predicted with a regression model
Today_cluster14_experts) # will be predicted with a classification model
dataFiles <- ""
files<-list.files(path=dataFiles, full.names = TRUE)
files
# CREATING NEW FILE FOR DATASET
write.csv(examples,"examples_meteo+radiation+cluster.csv", row.names=FALSE)
# GETTING ONLY ATTRIBUTES NEEDED FOR THE PREDICTION SYSTEM
examples <- full_dataset %>% select(gd_previo,
kd_previo,
t9_12_diaprevio,
t13_15_diaprevio,
h8_diaprevio,
h14_diaprevio,
t_dia_diaprevio,
preciptac_dia_diaprevio,
Predicc_temp_day_C,
Predicc_Relative_humidity_day_0_1,
Predicc_cloudy_sky_day_0_1,
Predicc_temp_10_11_12_C,
Predicc_temp_13_14_15_C,
Predicc_R_hum_10_11_12,
Predicc_R_hum_13_14_15,
Predicc_cloudy_10_11_12,
Predicc_cloudy_13_14_15,
kd, # will be predicted with a regression model
Today_cluster14_experts) # will be predicted with a classification model
shiny::runApp('Documents/URSUS-DM/PV_/roof_pv_app/optimalLocationPVRoof/ursusdm_pv/ursusdm_pv')
install.packages("rsconnect")
install.packages("rsconnect")
rsconnect::setAccountInfo(name='ursusdm',
token='B40C92CF096A590984D0E866DE8AFA96',
secret='zkC8h99eeuMr5Jy+lvjQHH6CQwiqdlFMx7hbwOVl')
library(rsconnect)
library(BiocManager)
install.packages("BiocManager")
library(BiocManager)
library(BiocManager)
options(repos = BiocManager::repositories())
getOption("repos")
library(BiocManager)
options(repos = BiocManager::repositories())
runApp('Documents/URSUS-DM/PV_/roof_pv_app/ursusdm_pv')
runApp()
runApp('Documents/URSUS-DM/PV_/roof_pv_app/ursusdm_pv')
runApp()
runApp('Documents/URSUS-DM/PV_/roof_pv_app/ursusdm_pv')
shiny::runApp()
shiny::runApp()
install_github()
install_github
library(lidR)
rsconnect::appDependencies()
BiocInstaller::biocLite()
options(repos = BiocManager::repositories())
library(BiocManager)
?BiocManager::install
install.packages(c("bit64", "broom", "deldir", "DT", "fs", "future", "geojsonsf", "ggplot2", "gower", "httr", "isoband", "jsonlite", "knitr", "lidR", "magick", "mda", "openssl", "pillar", "pkgbuild", "processx", "qs", "raster", "Rcpp", "RcppArmadillo", "Rdpack", "recipes", "remotes", "rgdal", "rJava", "rlang", "roxygen2", "sf", "shiny", "SpaDES.tools", "stars", "stringfish", "svglite", "tibble", "tinytex", "tmap", "tmaptools", "vctrs", "xfun"))
install.packages(c("bit64", "broom", "deldir", "DT", "fs", "future", "geojsonsf", "ggplot2", "gower", "httr", "isoband", "jsonlite", "knitr", "lidR", "magick", "mda", "openssl", "pillar", "pkgbuild", "processx", "qs", "raster", "Rcpp", "RcppArmadillo", "Rdpack", "recipes", "remotes", "rgdal", "rJava", "rlang", "roxygen2", "sf", "shiny", "SpaDES.tools", "stars", "stringfish", "svglite", "tibble", "tinytex", "tmap", "tmaptools", "vctrs", "xfun"))
install.packages(c("bit64", "broom", "deldir", "DT", "fs", "future", "geojsonsf", "ggplot2", "gower", "httr", "isoband", "jsonlite", "knitr", "lidR", "magick", "mda", "openssl", "pillar", "pkgbuild", "processx", "qs", "raster", "Rcpp", "RcppArmadillo", "Rdpack", "recipes", "remotes", "rgdal", "rJava", "rlang", "roxygen2", "sf", "shiny", "SpaDES.tools", "stars", "stringfish", "svglite", "tibble", "tinytex", "tmap", "tmaptools", "vctrs", "xfun"))
install.packages(c("bit64", "broom", "deldir", "DT", "fs", "future", "geojsonsf", "ggplot2", "gower", "httr", "isoband", "jsonlite", "knitr", "lidR", "magick", "mda", "openssl", "pillar", "pkgbuild", "processx", "qs", "raster", "Rcpp", "RcppArmadillo", "Rdpack", "recipes", "remotes", "rgdal", "rJava", "rlang", "roxygen2", "sf", "shiny", "SpaDES.tools", "stars", "stringfish", "svglite", "tibble", "tinytex", "tmap", "tmaptools", "vctrs", "xfun"))
install.packages(c("bit64", "broom", "deldir", "DT", "fs", "future", "geojsonsf", "ggplot2", "gower", "httr", "isoband", "jsonlite", "knitr", "lidR", "magick", "mda", "openssl", "pillar", "pkgbuild", "processx", "qs", "raster", "Rcpp", "RcppArmadillo", "Rdpack", "recipes", "remotes", "rgdal", "rJava", "rlang", "roxygen2", "sf", "shiny", "SpaDES.tools", "stars", "stringfish", "svglite", "tibble", "tinytex", "tmap", "tmaptools", "vctrs", "xfun"))
install.packages(c("bit64", "broom", "deldir", "DT", "fs", "future", "geojsonsf", "ggplot2", "gower", "httr", "isoband", "jsonlite", "knitr", "lidR", "magick", "mda", "openssl", "pillar", "pkgbuild", "processx", "qs", "raster", "Rcpp", "RcppArmadillo", "Rdpack", "recipes", "remotes", "rgdal", "rJava", "rlang", "roxygen2", "sf", "shiny", "SpaDES.tools", "stars", "stringfish", "svglite", "tibble", "tinytex", "tmap", "tmaptools", "vctrs", "xfun"))
library(BiocManager)
BiocManager::install(version = "3.11")
library(BiocManager)
library(BiocVersion)
options(repos = BiocManager::repositories())
getOption("repos")
rsconnect::appDependencies()
install.packages("lidR")
library(lidR)
rsconnect::appDependencies()
shiny::runApp()
options(repos = BiocInstaller::biocinstallRepos())
install.packages("BiocInstaller")
rsconnect::appDependencies()
BiocManager::version()
options(repos = c("CRAN" = "https://cran.rstudio.com/", "BioCsoft" = "https://bioconductor.org/packages/3.11/bioc", "BioCann" = "https://bioconductor.org/packages/3.11/data/annotation"))
BiocManager::::repositories()
BiocManager::repositories()
library(BiocManager)
options(repos = BiocManager::repositories())
getOption("repos")
remove.packages("lidR")
install.packages("lidR")
library(lidR)
rsconnect::setAccountInfo(name='ursusdm',
token='B40C92CF096A590984D0E866DE8AFA96',
secret='<SECRET>')
rsconnect::setAccountInfo(name='ursusdm',
token='B40C92CF096A590984D0E866DE8AFA96',
secret='zkC8h99eeuMr5Jy+lvjQHH6CQwiqdlFMx7hbwOVl')
library(BiocManager)
options(repos = BiocManager::repositories())
bioc <- local({
env <- new.env()
on.exit(rm(env))
evalq(source("http://bioconductor.org/biocLite.R", local = TRUE), env)
biocinstallRepos()
})
library(BiocManager)
options(repos = BiocManager::repositories())
devtools::session_info()
remove.packages("lidR")
remotes::install_github("Jean-Romain/lidR")
install.packages("remotes")
remotes::install_github("Jean-Romain/lidR")
remove.packages("lidR")
install.packages("lidR")
library(lidR)
shiny::runApp()
runApp()
library(BiocManager)
options(repos = BiocManager::repositories())
option("repos")
options("repos")
setRepositories(addURLs = c(BioC = "https://bioconductor.org/packages/3.11/bioc"))
runApp()
library(BiocManager)
options(repos = BiocManager::repositories())
library(BiocManager)
options(repos = BiocManager::repositories())
options ("repos")
setRepositories()
setRepositories()
options(repos = BiocManager::repositories())
options ("repos")
library(BiocVersion)
setRepositories()
options(repos = BiocManager::repositories())
options ("repos")
BiocManager::repositories()
options(repos = BiocManager::repositories())
options ("repos")
remove.packages("biocManager")
remove.packages("BiocManager")
options(repos = BiocManager::repositories())
install.packages("BiocManager")
setRepositories()
library(BiocManager)
options(repos = BiocManager::repositories())
options ("repos")
install.packages(c("abind", "base64enc", "colorspace", "dichromat", "evaluate", "foreach", "highr", "linprog", "markdown", "Matrix", "mime", "numDeriv", "png", "rgdal", "timeDate", "xtable"))
install.packages(c("abind", "base64enc", "colorspace", "dichromat", "evaluate", "foreach", "highr", "linprog", "markdown", "Matrix", "mime", "numDeriv", "png", "rgdal", "timeDate", "xtable"))
install.packages(c("abind", "base64enc", "colorspace", "dichromat", "evaluate", "foreach", "highr", "linprog", "markdown", "Matrix", "mime", "numDeriv", "png", "rgdal", "timeDate", "xtable"))
setRepositories()
setRepositories()
options(repos = BiocManager::repositories()
options(repos = BiocManager::repositories())
options(repos = BiocManager::repositories())
getOption("repos")
library(BiocManager)
library(BiocVersion)
rsconnect::appDependencies()
warning()
warnings()
warnings()
BiocManager::repositories()
setRepositories()
setRepositories()
setRepositories(addURLs =
c(CRAN = "https://cran.rstudio.com/"), BioCsoft = "https://bioconductor.org/packages/3.11/bioc", BioCann = "https://bioconductor.org/packages/3.11/data/annotation", BioCexp = "https://bioconductor.org/packages/3.11/data/experiment", BioCworkflows = "https://bioconductor.org/packages/3.11/workflows")
setRepositories(addURLs =
c(CRAN = "https://cran.rstudio.com/", BioCsoft = "https://bioconductor.org/packages/3.11/bioc", BioCann = "https://bioconductor.org/packages/3.11/data/annotation", BioCexp = "https://bioconductor.org/packages/3.11/data/experiment", BioCworkflows = "https://bioconductor.org/packages/3.11/workflows")
getOption("repos")
setRepositories(addURLs =
c(CRAN = "https://cran.rstudio.com/", BioCsoft = "https://bioconductor.org/packages/3.11/bioc", BioCann = "https://bioconductor.org/packages/3.11/data/annotation", BioCexp = "https://bioconductor.org/packages/3.11/data/experiment", BioCworkflows = "https://bioconductor.org/packages/3.11/workflows" ) )
setRepositories(addURLs =
c(CRAN = "https://cran.rstudio.com/", BioCsoft = "https://bioconductor.org/packages/3.11/bioc", BioCann = "https://bioconductor.org/packages/3.11/data/annotation", BioCexp = "https://bioconductor.org/packages/3.11/data/experiment", BioCworkflows = "https://bioconductor.org/packages/3.11/workflows") )
getOption("repos")
BiocManager::repositories()
rsconnect::appDependencies()
options(repos = BiocManager::repositories()
options(repos = BiocManager::repositories())
getOption("repos")
options(repos = BiocManager::repositories())
rsconnect::deployApp()
options("repos")
getOption("repo")
getOption("repos")
options(repos = BiocManager::repositories())
getOption("repos")
shiny::runApp()
runApp()
rsconnect::setAccountInfo(name='ursusdm',
token='B40C92CF096A590984D0E866DE8AFA96',
secret='zkC8h99eeuMr5Jy+lvjQHH6CQwiqdlFMx7hbwOVl')
rsconnect::appDependencies()
getOption("repos")
library(BiocManager)
options(repos = BiocManager::repositories())
getOption("repos")
runApp()
detach("package:lidR", unload = TRUE)
library(lidR)
remove.packages("lidR")
remotes::install_github("Jean-Romain/lidR")
remotes::install_github("Jean-Romain/lidR")
remotes::install_github("Jean-Romain/lidR")
getOption("repos")
rsconnect::appDependencies()
runApp()
runApp()
remove.packages("lidR")
remotes::install_github("Jean-Romain/lidR")
runApp()
shiny::runApp()
rsconnect::appDependencies()
setRepositories()
getOption("repo")
getOption("repos")
library(highr)
detach("package:highr", unload = TRUE)
library(highr)
setRepositories()
getOptions("repos")
getOption("repos")
install.packages("highr")
install.packages("png")
install.packages("mime")
shiny::runApp()
install.packages("base64enc")
install.packages("evaluate")
warnings()
install.packages("markdown")
install.packages("rgdal")
shiny::runApp()
runApp()
